---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  tasks:
    # required storage account auth token for terraform init
    # - name: 
    #   command: az account show || az login
    - name: Get Azure Storage Account access key
      command: az storage account keys list -g "terraform-remote-state" -n "actfstate" --subscription "DPD" --query "[0].value" --output tsv
      register: access_key

    - name: Terraform clone iweb2.arnoldclark.com
      community.general.terraform:
        project_path: "$HOME/ac/ansible-node-test/terraform/vms"
        state: present
        # force_init: true
        # backend_config:
        #    access_key: "{{ access_key.stdout }}"
        #    upgrade: true
      environment:
        VSPHERE_PASSWORD: "{{ lookup('env', 'VSPHERE_PASSWORD') }}"
        VSPHERE_USER: "e0055059"
        # VSPHERE_PASSWORD: "{{ molecule_yml.driver.vsphere_password }}"
        # VSPHERE_USER: "{{ molecule_yml.driver.vsphere_user }}"
      register: server
  
    - when: server.changed | default(false) | bool
      block:
        - name: Populate instance config dict
          set_fact:
            # server object is used to gather terraform outputs in order to build a dynamic inventory 
            instance_conf_dict:
              # instance: "{{ server.outputs.instance_name.value }}"
              address: "{{ server.outputs.instance_ip.value }}"
              user: "root"
              port: 22
              identity_file: "~/.ssh.id_rsa"
          register: instance_config_dict

    # - name: set instance_config_dict manually
    #   set_fact:
    #     molecule_instance_config: $HOME/.cache/molecule/ansible-node-test/default/instance_config.yml
    #     instance_config_dict:  { "ansible_facts": { "instance_conf_dict": { "address": "10.31.2.10", "identity_file": "~/.ssh.id_rsa", "instance": "be299763-69e4-9979-1e77-1bd33bc419d8", "port": 22, "user": "root" } }, "changed": false, "failed": false }
    #   no_log: false

    # instance_config_dict json output must be wrapped in container [] for map() to work properly, for cases when there are many instances
    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ [instance_config_dict] | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      # no_log: false

    - name: Dump instance config
      copy:
        content: |
          ---
          # Molecule managed
          {{ instance_conf | to_nice_yaml(indent=2, width=1337) }}
        dest: "{{ molecule_instance_config }}"
      # no_log: false